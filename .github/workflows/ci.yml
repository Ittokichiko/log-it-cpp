name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        std: [11, 17]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: git submodule update --init --recursive
      - name: Configure
        run: cmake -S . -B build -DLOG_IT_CPP_BUILD_TESTS=ON -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DLOGIT_WITH_SYSLOG=ON -DLOGIT_WITH_WIN_EVENT_LOG=OFF
      - name: Build
        run: cmake --build build
      - name: Install
        run: cmake --install build --prefix install
      - name: Test
        run: ctest --test-dir build
      - name: Configure consumer project
        run: cmake -S tests/install_consumer -B build-consumer -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install -DCMAKE_CXX_STANDARD=${{ matrix.std }}
      - name: Build consumer project
        run: cmake --build build-consumer
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.std }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/Testing/Temporary/LastTest.log
          if-no-files-found: ignore

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        std: [11, 17]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: git submodule update --init --recursive
      - name: Configure
        run: cmake -S . -B build -DLOG_IT_CPP_BUILD_TESTS=ON -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DLOGIT_WITH_SYSLOG=OFF -DLOGIT_WITH_WIN_EVENT_LOG=ON
      - name: Build
        run: cmake --build build --config Release
      - name: Install
        run: cmake --install build --prefix install --config Release
      - name: Test
        run: ctest --test-dir build -C Release
      - name: Configure consumer project
        run: cmake -S tests/install_consumer -B build-consumer -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install" -DCMAKE_CXX_STANDARD=${{ matrix.std }}
      - name: Build consumer project
        run: cmake --build build-consumer --config Release
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.std }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/Testing/Temporary/LastTest.log
          if-no-files-found: ignore

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        std: [11, 17]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: git submodule update --init --recursive
      - name: Configure
        run: cmake -S . -B build -DLOG_IT_CPP_BUILD_TESTS=ON -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DLOGIT_WITH_SYSLOG=ON -DLOGIT_WITH_WIN_EVENT_LOG=OFF
      - name: Build
        run: cmake --build build
      - name: Install
        run: cmake --install build --prefix install
      - name: Test
        run: ctest --test-dir build
      - name: Configure consumer project
        run: cmake -S tests/install_consumer -B build-consumer -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install -DCMAKE_CXX_STANDARD=${{ matrix.std }}
      - name: Build consumer project
        run: cmake --build build-consumer
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.std }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/Testing/Temporary/LastTest.log
          if-no-files-found: ignore

  vcpkg-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: git submodule update --init --recursive
      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
      - name: Validate port
        run: |
          ./vcpkg/vcpkg install log-it-cpp \
            --overlay-ports=vcpkg-overlay/ports \
            --overlay-ports=libs/time-shield-cpp/vcpkg-overlay/ports
      - name: Configure consumer project
        run: cmake -B build -S tests/install_consumer -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      - name: Build consumer project
        run: cmake --build build
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-install-logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/Testing/Temporary/LastTest.log
          if-no-files-found: ignore

  emscripten:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: git submodule update --init --recursive
      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: 'latest'
      - name: Configure (Node target)
        run: |
          emcmake cmake -S . -B build-ems \
            -DCMAKE_BUILD_TYPE=Release \
            -DLOG_IT_CPP_BUILD_TESTS=ON \
            -DLOGIT_EMSCRIPTEN=ON -DLOGIT_FORCE_ASYNC_OFF=ON
      - name: Build
        run: cmake --build build-ems --target ems_console ems_async_flush -j
      - name: Run smoke tests
        run: |
          node --no-experimental-fetch build-ems/tests/ems_console.js
          node --no-experimental-fetch build-ems/tests/ems_async_flush.js
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: emscripten-logs
          path: |
            build-ems/CMakeFiles/CMakeOutput.log
            build-ems/Testing/Temporary/LastTest.log
          if-no-files-found: ignore
